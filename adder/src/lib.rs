// cargo test
//     run all the tests in parallel and capture output generated during test runs,
//     preventing the output from being displayed
//     and making it easier to read the output related to the test results.
// cargo test --help
//     display all options available
// cargo test -- --test-threads=1
//     don't use parallelism (e.g. the tests share state)
// cargo test -- --show-output
//     display outputs generated by the tested functions
// cargo test greeting
//     run all tests containing 'greeting' in the test function name
// #[ignore]
//     this attribute causes the test run to exclude this test
// cargo test -- --ignored
//     run all tests that have been marked with the ignore attribute

// Put unit tests in the src directory in each file with the code that theyâ€™re testing.
// The convention is to create a module named tests in each file to contain the test functions and to annotate the module with cfg(test).
// By convention, integration tests are put in a 'tests' directory.
// Cargo treats the tests directory specially
// and compiles files in this directory only when we run cargo test

#[cfg(test)] // tells Rust to compile and run the test code only when cargo test is run, not when running cargo build
mod tests {
    use super::*; // Bring the code under test in the outer module into the scope of the inner module.
                  // We use a glob here so anything we define in the outer module is available to this tests module.

    // #[test]
    // fn exploration() {
    //     assert_eq!(2 + 2, 4);
    // }

    // #[test]
    // fn another() {
    //     panic!("Test failed");
    // }

    #[test]
    fn larger_can_hold_smaller() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(larger.can_hold(&smaller)); // test boolean is true
    }

    #[test]
    fn smaller_cannot_hold_larger() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(!smaller.can_hold(&larger)); // test boolean is true (i.e. !false)
    }

    #[test]
    pub fn it_adds_two() {
        assert_eq!(4, add_two(2)); // test equality (i.e. left == right)
        // the values being compared must implement the PartialEq and Debug traits
    }

    #[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(result.contains("Carol"));
    }

    // #[test]
    // fn greeting_contains_name_fail() { // custom failure message
    //     let result = greeting("Carrol");
    //     assert!(
    //         result.contains("Carol"),
    //         "Greeting did not contain name, value was `{}`",
    //         result
    //     );
    // }

    #[test]
    #[should_panic] // check for panics
    fn greater_than_100() {
        Guess::new(200); // test will pass, because the function panics as expected
    }

    #[test]
    #[should_panic(expected = "Guess value must be less than or equal to 100")] // assert that the function panics in the right way
    fn greater_than_100_more_precise() {
        Guess::new(200); // test will pass, because the function panics as expected
    }

    // Using Result<T, E> in Tests
    #[test] // #[should_panic] can't be used here, an Err value must be returned when the test should fail
    fn it_works() -> Result<(), String> {
        if 2 + 2 == 4 { // replace 4 with 5 to test error output
            Ok(())
        } else {
            Err(String::from("two plus two does not equal four"))
        }
    }
}

#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }
}

pub fn add_two(a: i32) -> i32 {
    a + 2
}

pub fn greeting(name: &str) -> String {
    format!("Hello {}!", name)
}

pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) -> Guess {
        if value < 1 {
            panic!(
                "Guess value must be greater than or equal to 1, got {}.",
                value
            );
        } else if value > 100 {
            panic!(
                "Guess value must be less than or equal to 100, got {}.",
                value
            );
        }

        Guess { value }
    }
}